<div class="set-size charts-container">
    <div class="pie-wrapper progress-@Math.Round(Percent)">
        <span class="label">@Math.Round(Percent)<span class="smaller">%</span></span>
        <div class="pie">
            <div class="left-side half-circle"></div>
            <div class="right-side half-circle"></div>
        </div>
    </div>
</div>

    @code {
        private EditContext _previousEditContext;
        private readonly EventHandler<ValidationStateChangedEventArgs> _validationStateChangedHandler;

        decimal totalErrors = 0;
        decimal Percent = 0;
        int Progress = 0;
        bool first = true;

        [Parameter] public object Model { get; set; }
        [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

        [CascadingParameter] EditContext CurrentEditContext { get; set; }

        public ProgressSummary()
        {
            _validationStateChangedHandler = (sender, eventArgs) =>
            {
                if(first)
                {
                    totalErrors = CurrentEditContext.GetValidationMessages().Count();
                    first = false;
                }
                Percent = ((totalErrors-((decimal)CurrentEditContext.GetValidationMessages().Count()))/ totalErrors)*100m;
                Progress=(((int)Math.Round(Percent)) / 10) * 10;
                StateHasChanged();
            };
        }

        protected override void OnParametersSet()
        {
            if (CurrentEditContext == null)
            {
                throw new InvalidOperationException($"{nameof(ValidationSummary)} requires a cascading parameter " +
                    $"of type {nameof(EditContext)}. For example, you can use {nameof(ValidationSummary)} inside " +
                    $"an {nameof(EditForm)}.");
            }

            if (CurrentEditContext != _previousEditContext)
            {
                DetachValidationStateChangedListener();
                CurrentEditContext.OnValidationStateChanged += _validationStateChangedHandler;
                _previousEditContext = CurrentEditContext;
            }

        }

        protected virtual void Dispose(bool disposing)
        {
        }

        private void DetachValidationStateChangedListener()
        {
            if (_previousEditContext != null)
            {
                _previousEditContext.OnValidationStateChanged -= _validationStateChangedHandler;
            }
        }
    }
